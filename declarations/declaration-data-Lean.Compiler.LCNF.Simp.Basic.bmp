{"name":"Lean.Compiler.LCNF.Simp.Basic","instances":[],"imports":["Init","Lean.Meta.Instances","Lean.Compiler.InlineAttrs","Lean.Compiler.Specialize","Lean.Compiler.LCNF.CompilerM"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Simp/Basic.lean#L43-L53","name":"Lean.Compiler.LCNF.Simp.findFunDecl?","docLink":"./Lean/Compiler/LCNF/Simp/Basic.html#Lean.Compiler.LCNF.Simp.findFunDecl?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Simp/Basic.lean#L35-L41","name":"Lean.Compiler.LCNF.Simp.findExpr","docLink":"./Lean/Compiler/LCNF/Simp/Basic.html#Lean.Compiler.LCNF.Simp.findExpr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Simp/Basic.lean#L23-L31","name":"Lean.Compiler.LCNF.Decl.isTemplateLike","docLink":"./Lean/Compiler/LCNF/Simp/Basic.html#Lean.Compiler.LCNF.Decl.isTemplateLike","doc":"Return `true` if `decl` is supposed to be inlined/specialized.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Simp/Basic.lean#L15-L18","name":"Lean.Compiler.LCNF.hasLocalInst","docLink":"./Lean/Compiler/LCNF/Simp/Basic.html#Lean.Compiler.LCNF.hasLocalInst","doc":"Return `true` if the arrow type contains an instance implicit argument.\n"}]}