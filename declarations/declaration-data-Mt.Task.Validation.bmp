{"name":"Mt.Task.Validation","instances":[],"imports":["Init","Mt.Reservation","Mt.Task.Basic"],"declarations":[{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Validation.lean#L161-L177","name":"Mt.TaskM.valid_blocking_rmr","docLink":"./Mt/Task/Validation.html#Mt.TaskM.valid_blocking_rmr","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Validation.lean#L145-L159","name":"Mt.TaskM.valid_assert","docLink":"./Mt/Task/Validation.html#Mt.TaskM.valid_assert","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Validation.lean#L135-L143","name":"Mt.TaskM.valid_read","docLink":"./Mt/Task/Validation.html#Mt.TaskM.valid_read","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Validation.lean#L125-L133","name":"Mt.TaskM.valid_rm","docLink":"./Mt/Task/Validation.html#Mt.TaskM.valid_rm","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Validation.lean#L110-L123","name":"Mt.TaskM.valid_rmr","docLink":"./Mt/Task/Validation.html#Mt.TaskM.valid_rmr","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Validation.lean#L80-L108","name":"Mt.TaskM.valid_bind","docLink":"./Mt/Task/Validation.html#Mt.TaskM.valid_bind","doc":"To prove that `a >>= f` is valid you need to prove that both `a` and `f u`\nfor all results `u` are valid.\n\nIn many cases, `a` does something to prepare `f u`. Since only `f u` needs\nto fulfil the final motive, we can choose an arbitrary motive to validate `a`\nas \"intermediate goal\".\n\nTo validate `f u` with the original `motive`, we can use the fact that the\nintermediate goal `motive_u` has been ensured by `a`. Motives use only results\nand reservations, which cannot be changed by other threads. Therefore, they\nstay valid even if other threads become active between `a` and `f u`. \n"},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Validation.lean#L61-L66","name":"Mt.TaskM.valid_pure","docLink":"./Mt/Task/Validation.html#Mt.TaskM.valid_pure","doc":"To prove that `pure t` is valid you need to prove that the `motive` holds "},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Validation.lean#L45-L58","name":"Mt.TaskM.valid","docLink":"./Mt/Task/Validation.html#Mt.TaskM.valid","doc":"Validation primitive for reasoning for composable tasks.\n\nValidation may assume `assuming` and must ensure the following:\n* The task has to behave conform to the specification at all times\n* The task never panics\n* Finally, `motive` holds after the task completes\n\n### Proving `valid`\nThe definition is rather cumbersome to work with. You should use\nhelper theorems like `valid_pure`, `valid_bind`, `valid_rmr`, ...\n\nThey are designed to be used with the `apply` tactic.\n\n### Blocking predicate: `assuming`\nWhen validating our task, we can assume `assuming state = true`. However,\nin most cases we have `assuming = λ _ => true`, i.e. our hypothesis does\nnot provide anything useful.\n\nThere is one important exception: Blocking threads. If a thread\nwaits for a certain condition before it continues its task, we can\nsafely assume that this condition holds when the task is excuting.\n\n### Final goal: `motive`\nA valid thread must drop its reservations in the end. Therefore, the\nfinal goal on those tasks is `λ _ r => r = IsReservation.empty`.\nHowever, intermediate tasks (i.e. single operations) do not need to\nshare this goal.\n\nIn fact, they usally do not. If one operation\nprepares the next operation, it usually creates some reservation to\nensure that no other thread undos this preparation. In this example,\nthe motive should encode that the preparation has been made.\n\n`motive` is the only way to pass facts from one iteration to the next.\nSee `valid_bind` for more information.\n"},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Validation.lean#L7-L7","name":"Mt.TaskM.instIsReservationReservation","docLink":"./Mt/Task/Validation.html#Mt.TaskM.instIsReservationReservation","doc":""}]}