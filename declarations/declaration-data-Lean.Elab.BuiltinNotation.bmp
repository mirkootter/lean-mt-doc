{"name":"Lean.Elab.BuiltinNotation","instances":[],"imports":["Init","Lean.Compiler.BorrowedAnnotation","Lean.Meta.KAbstract","Lean.Meta.MatchUtil","Lean.Elab.SyntheticMVars"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L353-L355","name":"Lean.Elab.Term.elabNoindex","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.elabNoindex","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L342-L351","name":"Lean.Elab.Term.elabStateRefT","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.elabStateRefT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L268-L340","name":"Lean.Elab.Term.elabSubst","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.elabSubst","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L241-L247","name":"Lean.Elab.Term.elabParen","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.elabParen","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L224-L239","name":"Lean.Elab.Term.expandParen","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.expandParen","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L219-L222","name":"Lean.Elab.Term.elabCDotFunctionAlias?.expandCDotArg?","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.elabCDotFunctionAlias?.expandCDotArg?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L203-L222","name":"Lean.Elab.Term.elabCDotFunctionAlias?","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.elabCDotFunctionAlias?","doc":"Helper method for elaborating terms such as `(.+.)` where a constant name is expected.\nThis method is usually used to implement tactics that function names as arguments (e.g., `simp`).\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L187-L197","name":"Lean.Elab.Term.expandCDot?.go","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.expandCDot?.go","doc":"Auxiliary function for expanding the `·` notation.\nThe extra state `Array Syntax` contains the new binder names.\nIf `stx` is a `·`, we create a fresh identifier, store in the\nextra state, and return it. Otherwise, we just return `stx`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L175-L197","name":"Lean.Elab.Term.expandCDot?","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.expandCDot?","doc":"Return `some` if succeeded expanding `·` notation occurring in\nthe given syntax. Otherwise, return `none`.\nExamples:\n- `· + 1` => `fun _a_1 => _a_1 + 1`\n- `f · · b` => `fun _a_1 _a_2 => f _a_1 _a_2 b` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L162-L167","name":"Lean.Elab.Term.hasCDot","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.hasCDot","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L152-L159","name":"Lean.Elab.Term.mkPairs.loop","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.mkPairs.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L151-L160","name":"Lean.Elab.Term.mkPairs","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.mkPairs","doc":"Return syntax `Prod.mk elems[0] (Prod.mk elems[1] ... (Prod.mk elems[elems.size - 2] elems[elems.size - 1])))` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L146-L148","name":"Lean.Elab.Term.elabSorry","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.elabSorry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L141-L144","name":"Lean.Elab.Term.expandDbgTrace","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.expandDbgTrace","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L133-L139","name":"Lean.Elab.Term.expandAssert","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.expandAssert","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L130-L131","name":"Lean.Elab.Term.expandUnreachable","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.expandUnreachable","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L119-L128","name":"Lean.Elab.Term.elabPanic","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.elabPanic","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L113-L117","name":"Lean.Elab.Term.elabTrailingParserMacro","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.elabTrailingParserMacro","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L101-L105","name":"Lean.Elab.Term.elabLeadingParserMacro","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.elabLeadingParserMacro","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L85-L88","name":"Lean.Elab.Term.expandSuffices","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.expandSuffices","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L76-L83","name":"Lean.Elab.Term.expandHave","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.expandHave","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L70-L74","name":"Lean.Elab.Term.expandShow","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.expandShow","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L65-L68","name":"Lean.Elab.Term.elabBorrowed","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.elabBorrowed","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L27-L63","name":"Lean.Elab.Term.elabAnonymousCtor","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.elabAnonymousCtor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/BuiltinNotation.lean#L14-L25","name":"Lean.Elab.Term.elabCoe","docLink":"./Lean/Elab/BuiltinNotation.html#Lean.Elab.Term.elabCoe","doc":""}]}