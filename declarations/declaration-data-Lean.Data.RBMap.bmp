{"name":"Lean.Data.RBMap","instances":[{"typeNames":["Lean.RBNode"],"name":"Lean.RBNode.instEmptyCollectionRBNode","className":"EmptyCollection"},{"typeNames":["Lean.RBMap"],"name":"Lean.instEmptyCollectionRBMap","className":"EmptyCollection"},{"typeNames":["Lean.RBMap"],"name":"Lean.instInhabitedRBMap","className":"Inhabited"},{"typeNames":["Lean.RBMap","Prod"],"name":"Lean.RBMap.instForInRBMapProd","className":"ForIn"},{"typeNames":["Lean.RBMap"],"name":"Lean.RBMap.instReprRBMap","className":"Repr"}],"imports":["Init"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L398-L399","name":"Lean.rbmapOf","docLink":"./Lean/Data/RBMap.html#Lean.rbmapOf","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L390-L394","name":"Lean.RBMap.intersectBy","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.intersectBy","doc":"Intersects the maps `t₁` and `t₂` using `mergeFn a b₁ b₂` to produce the new value. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L382-L387","name":"Lean.RBMap.mergeBy","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.mergeBy","doc":"Merges the maps `t₁` and `t₂`, if a key `a : α` exists in both,\nthen use `mergeFn a b₁ b₂` to produce the new merged value. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L375-L378","name":"Lean.RBMap.find!","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.find!","doc":"Attempts to find the value with key `k : α` in `t` and panics if there is no such key. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L369-L372","name":"Lean.RBMap.max!","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.max!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L364-L367","name":"Lean.RBMap.min!","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.min!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L361-L362","name":"Lean.RBMap.maxDepth","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.maxDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L358-L359","name":"Lean.RBMap.size","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.size","doc":"The number of items in the RBMap. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L354-L355","name":"Lean.RBMap.any","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.any","doc":"Returns true if the given predicate is true for any item in the RBMap. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L350-L351","name":"Lean.RBMap.all","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.all","doc":"Returns true if the given predicate is true for all items in the RBMap. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L346-L347","name":"Lean.RBMap.fromArray","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.fromArray","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L343-L344","name":"Lean.RBMap.fromList","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.fromList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L340-L341","name":"Lean.RBMap.contains","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.contains","doc":"Returns true if the given key `a` is in the RBMap. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L336-L337","name":"Lean.RBMap.lowerBound","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.lowerBound","doc":"(lowerBound k) retrieves the kv pair of the largest key smaller than or equal to `k`,\nif it exists. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L331-L332","name":"Lean.RBMap.findD","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.findD","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L328-L329","name":"Lean.RBMap.find?","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.find?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L325-L326","name":"Lean.RBMap.findCore?","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.findCore?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L321-L323","name":"Lean.RBMap.ofList","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.ofList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L318-L319","name":"Lean.RBMap.erase","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.erase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L315-L316","name":"Lean.RBMap.insert","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.insert","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L312-L313","name":"Lean.RBMap.instReprRBMap","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.instReprRBMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L306-L310","name":"Lean.RBMap.max","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.max","doc":"Returns the kv pair `(a,b)` such that `a ≥ k` for all keys in the RBMap. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L299-L303","name":"Lean.RBMap.min","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.min","doc":"Returns the kv pair `(a,b)` such that `a ≤ k` for all keys in the RBMap. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L295-L296","name":"Lean.RBMap.toList","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.toList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L291-L293","name":"Lean.RBMap.isEmpty","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.isEmpty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L288-L289","name":"Lean.RBMap.instForInRBMapProd","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.instForInRBMapProd","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L285-L286","name":"Lean.RBMap.forIn","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.forIn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L282-L283","name":"Lean.RBMap.forM","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.forM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L279-L280","name":"Lean.RBMap.foldM","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.foldM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L276-L277","name":"Lean.RBMap.revFold","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.revFold","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L273-L274","name":"Lean.RBMap.fold","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.fold","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L270-L271","name":"Lean.RBMap.depth","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.depth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L265-L265","name":"Lean.instInhabitedRBMap","docLink":"./Lean/Data/RBMap.html#Lean.instInhabitedRBMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L262-L263","name":"Lean.instEmptyCollectionRBMap","docLink":"./Lean/Data/RBMap.html#Lean.instEmptyCollectionRBMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L259-L260","name":"Lean.RBMap.empty","docLink":"./Lean/Data/RBMap.html#Lean.RBMap.empty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L256-L257","name":"Lean.mkRBMap","docLink":"./Lean/Data/RBMap.html#Lean.mkRBMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L253-L254","name":"Lean.RBMap","docLink":"./Lean/Data/RBMap.html#Lean.RBMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L245-L245","name":"Lean.RBNode.instEmptyCollectionRBNode","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.instEmptyCollectionRBNode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L242-L243","name":"Lean.RBNode.toArray","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.toArray","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L234-L238","name":"Lean.RBNode.map","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.map","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L227-L232","name":"Lean.RBNode.mapM","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.mapM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L220-L223","name":"Lean.RBNode.WellFormed","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.WellFormed","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L210-L216","name":"Lean.RBNode.lowerBound","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.lowerBound","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L202-L208","name":"Lean.RBNode.find","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.find","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L194-L200","name":"Lean.RBNode.findCore","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.findCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L185-L187","name":"Lean.RBNode.erase","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.erase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L173-L183","name":"Lean.RBNode.del","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.del","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L155-L167","name":"Lean.RBNode.appendTrees","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.appendTrees","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L146-L152","name":"Lean.RBNode.balRight","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.balRight","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L140-L144","name":"Lean.RBNode.balLeft","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.balLeft","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L136-L138","name":"Lean.RBNode.setRed","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.setRed","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L127-L134","name":"Lean.RBNode.balance₃","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.balance₃","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L120-L122","name":"Lean.RBNode.insert","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.insert","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L116-L118","name":"Lean.RBNode.setBlack","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.setBlack","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L103-L114","name":"Lean.RBNode.ins","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.ins","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L95-L97","name":"Lean.RBNode.isBlack","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.isBlack","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L91-L93","name":"Lean.RBNode.isRed","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.isRed","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L86-L89","name":"Lean.RBNode.balance2","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.balance2","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L80-L83","name":"Lean.RBNode.balance1","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.balance1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L76-L77","name":"Lean.RBNode.singleton","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.singleton","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L72-L74","name":"Lean.RBNode.any","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.any","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L68-L70","name":"Lean.RBNode.all","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.all","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L64-L66","name":"Lean.RBNode.revFold","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.revFold","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L51-L59","name":"Lean.RBNode.forIn.visit","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.forIn.visit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L50-L62","name":"Lean.RBNode.forIn","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.forIn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L43-L48","name":"Lean.RBNode.foldM","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.foldM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L39-L41","name":"Lean.RBNode.forM","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.forM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L35-L37","name":"Lean.RBNode.fold","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.fold","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L30-L33","name":"Lean.RBNode.max","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.max","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L25-L28","name":"Lean.RBNode.min","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.min","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L21-L23","name":"Lean.RBNode.depth","docLink":"./Lean/Data/RBMap.html#Lean.RBNode.depth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L12-L14","name":"Lean.RBNode","docLink":"./Lean/Data/RBMap.html#Lean.RBNode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Data/RBMap.lean#L9-L10","name":"Lean.Rbcolor","docLink":"./Lean/Data/RBMap.html#Lean.Rbcolor","doc":""}]}