{"name":"Lean.Meta.PPGoal","instances":[],"imports":["Init","Lean.Meta.InferType"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L225-L255","name":"Lean.Meta.ppGoal.ppVars","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ppGoal.ppVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L215-L224","name":"Lean.Meta.ppGoal.pushPending","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ppGoal.pushPending","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L202-L267","name":"Lean.Meta.ppGoal","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ppGoal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L195-L200","name":"Lean.Meta.getGoalPrefix","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.getGoalPrefix","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L178-L188","name":"Lean.Meta.ToHide.collect","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.collect","doc":"If `pp.inaccessibleNames == false`, then collect two sets of `FVarId`s : `hiddenInaccessible` and `hiddenInaccessibleProp`\n1- `hiddenInaccessible` contains `FVarId`s of free variables with inaccessible names that\n    a) are not propositions or\n    b) are propositions containing \"visible\" names.\n2- `hiddenInaccessibleProp` contains `FVarId`s of free variables with inaccessible names that are propositions\n   containing \"visible\" names.\nBoth sets do not contain `FVarId`s that contain visible backward or forward dependencies.\nThe `goalTarget` counts as a forward dependency.\n\nWe say a name is visible if it is a free variable with FVarId not in `hiddenInaccessible` nor `hiddenInaccessibleProp`\n\nFor propositions in `hiddenInaccessibleProp`, we show only their types when displaying a goal.\n\nRemark: when `pp.inaccessibleNames == true`, we still compute `hiddenInaccessibleProp` to prevent the\ngoal from being littered with irrelevant names.\n\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L143-L147","name":"Lean.Meta.ToHide.fixpoint","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.fixpoint","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L125-L141","name":"Lean.Meta.ToHide.fixpointStep","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.fixpointStep","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L112-L123","name":"Lean.Meta.ToHide.visitVisibleExpr.visit","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.visitVisibleExpr.visit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L109-L123","name":"Lean.Meta.ToHide.visitVisibleExpr","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.visitVisibleExpr","doc":"If `e` is visible, then any inaccessible in `e` marked as hidden should be unmarked. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L103-L106","name":"Lean.Meta.ToHide.hasInaccessibleNameDep","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.hasInaccessibleNameDep","doc":"Return true if the given local declaration has a \"nonvisible dependency\", that is, it contains\na free variable that is `hiddenInaccessible` or `hiddenInaccessibleProp` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L97-L99","name":"Lean.Meta.ToHide.hasVisibleDep","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.hasVisibleDep","doc":"Return true if the given local declaration has a \"visible dependency\", that is, it contains\na free variable that is `hiddenInaccessible`\n\nRecall that hiddenInaccessibleProps are visible, only their names are hidden "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L79-L84","name":"Lean.Meta.ToHide.moveToHiddeProp","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.moveToHiddeProp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L72-L77","name":"Lean.Meta.ToHide.unmark","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.unmark","doc":"If `fvarId` isMarked, then unmark it. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L67-L69","name":"Lean.Meta.ToHide.isMarked","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.isMarked","doc":"Return true if `fvarId` is marked as an hidden inaccessible or inaccessible proposition "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L64-L64","name":"Lean.Meta.ToHide.M","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L55-L62","name":"Lean.Meta.ToHide.Context","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L48-L53","name":"Lean.Meta.ToHide.State","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.State","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L43-L44","name":"Lean.Meta.withPPForTacticGoal","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.withPPForTacticGoal","doc":"Set pretty-printing options (`pp.showLetValues = true` and `pp.inaccessibleNames = true`) for visualizing goals.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L37-L38","name":"Lean.Meta.withPPShowLetValues","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.withPPShowLetValues","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L34-L35","name":"Lean.Meta.withPPShowLetValuesImp","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.withPPShowLetValuesImp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L31-L32","name":"Lean.Meta.withPPInaccessibleNames","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.withPPInaccessibleNames","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L28-L29","name":"Lean.Meta.withPPInaccessibleNamesImp","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.withPPInaccessibleNamesImp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L22-L26","name":"Lean.Meta.pp.showLetValues","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.pp.showLetValues","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L16-L20","name":"Lean.Meta.pp.inaccessibleNames","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.pp.inaccessibleNames","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/PPGoal.lean#L10-L14","name":"Lean.Meta.pp.auxDecls","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.pp.auxDecls","doc":""}]}