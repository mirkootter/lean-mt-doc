{"name":"Lean.Compiler.LCNF.ToLCNF","instances":[{"typeNames":["Lean.Compiler.LCNF.ToLCNF.Element"],"name":"Lean.Compiler.LCNF.ToLCNF.instInhabitedElement","className":"Inhabited"}],"imports":["Init","Lean.ProjFns","Lean.Compiler.BorrowedAnnotation","Lean.Compiler.LCNF.Types","Lean.Compiler.LCNF.Bind","Lean.Compiler.LCNF.InferType","Lean.Compiler.LCNF.Util"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L726-L740","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLet","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLet","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L723-L724","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProj","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProj","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L717-L721","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitMData","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitMData","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L681-L715","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLambda","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLambda","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L656-L679","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitApp","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitApp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L641-L654","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProjFn","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProjFn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L631-L639","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.expandNoConfusionMajor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.expandNoConfusionMajor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L607-L629","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitNoConfusion","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitNoConfusion","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L597-L605","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAndRec","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAndRec","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L591-L595","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitFalseRec","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitFalseRec","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L574-L589","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitEqRec","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitEqRec","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L561-L572","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitQuotLift","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitQuotLift","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L557-L559","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCtor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCtor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L520-L555","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCases","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCases","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L490-L518","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAlt","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAlt","doc":"Visit a `matcher`/`casesOn` alternative.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L477-L485","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.mkOverApplication","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.mkOverApplication","doc":"If `args.size == arity`, then just return `app`.\nOtherwise return\n```\nlet k := app\nk args[arity:]\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L462-L467","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.etaIfUnderApplied","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.etaIfUnderApplied","doc":"Eta expand if under applied, otherwise apply k "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L454-L459","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppDefault","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppDefault","doc":"Visit args, and return `f args` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L436-L451","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppArg","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L418-L434","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visit","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L399-L416","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCore","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L394-L740","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF","doc":"Put the given expression in `LCNF`.\n\n- Nested proofs are replaced with `lcProof`-applications.\n- Eta-expand applications of declarations that satisfy `shouldEtaExpand`.\n- Put computationally relevant expressions in A-normal form.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L371-L385","name":"Lean.Compiler.LCNF.ToLCNF.etaReduceImplicit","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.etaReduceImplicit","doc":"Eta reduce implicits. We use this function to eliminate introduced by the implicit lambda feature,\nwhere it generates terms such as `fun {Î±} => ReaderT.pure`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L360-L365","name":"Lean.Compiler.LCNF.ToLCNF.etaExpandN","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.etaExpandN","doc":"Eta-expand with `n` lambdas.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L349-L355","name":"Lean.Compiler.LCNF.ToLCNF.mustEtaExpand","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mustEtaExpand","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L339-L347","name":"Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda.go","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L336-L347","name":"Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L328-L334","name":"Lean.Compiler.LCNF.ToLCNF.visitLambda.go","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitLambda.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L325-L334","name":"Lean.Compiler.LCNF.ToLCNF.visitLambda","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitLambda","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L316-L323","name":"Lean.Compiler.LCNF.ToLCNF.mkLetDecl","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkLetDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L308-L314","name":"Lean.Compiler.LCNF.ToLCNF.mkParam","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkParam","doc":"Create a new local declaration using a Lean regular type. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L300-L305","name":"Lean.Compiler.LCNF.ToLCNF.cleanupBinderName","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.cleanupBinderName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L291-L298","name":"Lean.Compiler.LCNF.ToLCNF.toLCNFType","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNFType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L285-L289","name":"Lean.Compiler.LCNF.ToLCNF.applyToAny","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.applyToAny","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L266-L278","name":"Lean.Compiler.LCNF.ToLCNF.withNewScope","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.withNewScope","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L233-L234","name":"Lean.Compiler.LCNF.ToLCNF.run","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.run","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L225-L231","name":"Lean.Compiler.LCNF.ToLCNF.mkAuxLetDecl","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkAuxLetDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L220-L223","name":"Lean.Compiler.LCNF.ToLCNF.mkUnreachable","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkUnreachable","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L217-L218","name":"Lean.Compiler.LCNF.ToLCNF.pushElement","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.pushElement","doc":"Add LCNF element to the current sequence "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L213-L214","name":"Lean.Compiler.LCNF.ToLCNF.toCode","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toCode","doc":"Create `Code` that executes the current `seq` and then returns `e` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L209-L210","name":"Lean.Compiler.LCNF.ToLCNF.liftMetaM","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.liftMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L207-L207","name":"Lean.Compiler.LCNF.ToLCNF.M","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L189-L205","name":"Lean.Compiler.LCNF.ToLCNF.State","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L159-L187","name":"Lean.Compiler.LCNF.ToLCNF.seqToCode.go","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.seqToCode.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L151-L187","name":"Lean.Compiler.LCNF.ToLCNF.seqToCode","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.seqToCode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L78-L149","name":"Lean.Compiler.LCNF.ToLCNF.bindCases.go","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L70-L76","name":"Lean.Compiler.LCNF.ToLCNF.bindCases.findFun?","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases.findFun?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L67-L68","name":"Lean.Compiler.LCNF.ToLCNF.bindCases.visitAlts","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases.visitAlts","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L60-L149","name":"Lean.Compiler.LCNF.ToLCNF.bindCases","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases","doc":"This method returns code that at each exit point of `cases`, it jumps to `jpDecl`.\nIt is similar to `Code.bind`, but we add special support for `inlineMatcher`.\nThe `inlineMatcher` function inlines the auxiliary `_match_<idx>` declarations.\nTo make sure there is no code duplication, `inlineMatcher` creates auxiliary declarations `_alt.<idx>`.\nWe can say the `_alt.<idx>` declarations are pre join points. For each auxiliary declaration used at\nan exit point of `cases`, this method creates an new auxiliary join point that invokes `_alt.<idx>`,\nand then jumps to `jpDecl`. The goal is to make sure the auxiliary join point is the only occurrence\nof `_alt.<idx>`, then `simp` will inline it.\nThat is, our goal is to try to promote the pre join points `_alt.<idx>` into a proper join point.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L47-L47","name":"Lean.Compiler.LCNF.ToLCNF.BindCasesM","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM","doc":"Auxiliary monad for implementing `bindCases` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L44-L44","name":"Lean.Compiler.LCNF.ToLCNF.BindCasesM.State","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM.State","doc":"State for `BindCasesM` monad\nMapping from `_alt.<idx>` variables to new join points\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L38-L38","name":"Lean.Compiler.LCNF.ToLCNF.instInhabitedElement","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.instInhabitedElement","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L32-L38","name":"Lean.Compiler.LCNF.ToLCNF.Element","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element","doc":"Auxiliary inductive datatype for constructing LCNF `Code` objects.\nThe `toLCNF` function maintains a sequence of elements that is eventually\nconverted into `Code`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L24-L25","name":"Lean.Compiler.LCNF.ToLCNF.mkLcProof","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkLcProof","doc":"Create the temporary `lcProof` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/ToLCNF.lean#L20-L21","name":"Lean.Compiler.LCNF.ToLCNF.isLCProof","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.isLCProof","doc":"Return `true` if `e` is a `lcProof` application.\nRecall that we use `lcProof` to erase all nested proofs.\n"}]}