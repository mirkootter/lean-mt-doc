{"name":"Lean.LocalContext","instances":[{"typeNames":["Lean.LocalDecl"],"name":"Lean.instInhabitedLocalDecl","className":"Inhabited"},{"typeNames":["Lean.LocalContext"],"name":"Lean.instInhabitedLocalContext","className":"Inhabited"},{"typeNames":["Lean.LocalContext","Lean.LocalDecl"],"name":"Lean.LocalContext.instForInLocalContextLocalDecl","className":"ForIn"},{"typeNames":[],"name":"Lean.instMonadLCtx","className":"Lean.MonadLCtx"}],"imports":["Init","Lean.Data.PersistentArray","Lean.Expr","Lean.Hygiene"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L423-L426","name":"Lean.LocalContext.replaceFVarId","docLink":"./Lean/LocalContext.html#Lean.LocalContext.replaceFVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L417-L421","name":"Lean.LocalDecl.replaceFVarId","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.replaceFVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L414-L415","name":"Lean.instMonadLCtx","docLink":"./Lean/LocalContext.html#Lean.instMonadLCtx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L409-L410","name":"Lean.MonadLCtx","docLink":"./Lean/LocalContext.html#Lean.MonadLCtx","doc":"Class used to denote that `m` has a local context. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L390-L404","name":"Lean.LocalContext.sanitizeNames","docLink":"./Lean/LocalContext.html#Lean.LocalContext.sanitizeNames","doc":"If option `pp.sanitizeNames` is set to `true`, add tombstone to shadowed local declaration names and ones contains macroscopes. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L386-L387","name":"Lean.LocalContext.all","docLink":"./Lean/LocalContext.html#Lean.LocalContext.all","doc":"Return `true` if all declarations in `lctx` satisfy `p`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L382-L383","name":"Lean.LocalContext.any","docLink":"./Lean/LocalContext.html#Lean.LocalContext.any","doc":"Return `true` if `lctx` contains a local declaration satisfying `p`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L376-L379","name":"Lean.LocalContext.allM","docLink":"./Lean/LocalContext.html#Lean.LocalContext.allM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L371-L374","name":"Lean.LocalContext.anyM","docLink":"./Lean/LocalContext.html#Lean.LocalContext.anyM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L368-L369","name":"Lean.LocalContext.mkForall","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkForall","doc":"Creates the expression `(x₁:α₁) → .. → (xₙ:αₙ) → b` for free variables `xs = #[x₁, .., xₙ]`,\nsuitably abstracting `b` and the types for each of the `xᵢ`, `αᵢ`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L363-L364","name":"Lean.LocalContext.mkLambda","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkLambda","doc":"Creates the expression `fun x₁ .. xₙ => b` for free variables `xs = #[x₁, .., xₙ]`,\nsuitably abstracting `b` and the types for each of the `xᵢ`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L341-L359","name":"Lean.LocalContext.mkBinding","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkBinding","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L338-L339","name":"Lean.LocalContext.isSubPrefixOf","docLink":"./Lean/LocalContext.html#Lean.LocalContext.isSubPrefixOf","doc":"Given `lctx₁ - exceptFVars` of the form `(x_1 : A_1) ... (x_n : A_n)`, then return true\niff there is a local context `B_1* (x_1 : A_1) ... B_n* (x_n : A_n)` which is a prefix\nof `lctx₂` where `B_i`'s are (possibly empty) sequences of local declarations. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L321-L333","name":"Lean.LocalContext.isSubPrefixOfAux","docLink":"./Lean/LocalContext.html#Lean.LocalContext.isSubPrefixOfAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L318-L319","name":"Lean.LocalContext.findDeclRev?","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findDeclRev?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L315-L316","name":"Lean.LocalContext.findDecl?","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findDecl?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L312-L313","name":"Lean.LocalContext.size","docLink":"./Lean/LocalContext.html#Lean.LocalContext.size","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L309-L310","name":"Lean.LocalContext.foldr","docLink":"./Lean/LocalContext.html#Lean.LocalContext.foldr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L306-L307","name":"Lean.LocalContext.foldl","docLink":"./Lean/LocalContext.html#Lean.LocalContext.foldl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L301-L304","name":"Lean.LocalContext.instForInLocalContextLocalDecl","docLink":"./Lean/LocalContext.html#Lean.LocalContext.instForInLocalContextLocalDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L296-L299","name":"Lean.LocalContext.findDeclRevM?","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findDeclRevM?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L291-L294","name":"Lean.LocalContext.findDeclM?","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findDeclM?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L286-L289","name":"Lean.LocalContext.forM","docLink":"./Lean/LocalContext.html#Lean.LocalContext.forM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L281-L284","name":"Lean.LocalContext.foldrM","docLink":"./Lean/LocalContext.html#Lean.LocalContext.foldrM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L276-L279","name":"Lean.LocalContext.foldlM","docLink":"./Lean/LocalContext.html#Lean.LocalContext.foldlM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L273-L274","name":"Lean.LocalContext.getAt?","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getAt?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L270-L271","name":"Lean.LocalContext.numIndices","docLink":"./Lean/LocalContext.html#Lean.LocalContext.numIndices","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L266-L267","name":"Lean.LocalContext.setBinderInfo","docLink":"./Lean/LocalContext.html#Lean.LocalContext.setBinderInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L256-L264","name":"Lean.LocalContext.modifyLocalDecl","docLink":"./Lean/LocalContext.html#Lean.LocalContext.modifyLocalDecl","doc":"Low-level function for updating the local context.\nAssumptions about `f`, the resulting nested expressions must be definitionally equal to their original values,\nthe `index` nor `fvarId` are modified.  "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L242-L250","name":"Lean.LocalContext.renameUserName","docLink":"./Lean/LocalContext.html#Lean.LocalContext.renameUserName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L236-L240","name":"Lean.LocalContext.setUserName","docLink":"./Lean/LocalContext.html#Lean.LocalContext.setUserName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L233-L234","name":"Lean.LocalContext.lastDecl","docLink":"./Lean/LocalContext.html#Lean.LocalContext.lastDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L228-L231","name":"Lean.LocalContext.getUnusedName","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getUnusedName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L220-L221","name":"Lean.LocalContext.usesUserName","docLink":"./Lean/LocalContext.html#Lean.LocalContext.usesUserName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L214-L218","name":"Lean.LocalContext.findFromUserName?","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findFromUserName?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L206-L212","name":"Lean.LocalContext.pop","docLink":"./Lean/LocalContext.html#Lean.LocalContext.pop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L199-L204","name":"Lean.LocalContext.erase","docLink":"./Lean/LocalContext.html#Lean.LocalContext.erase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L189-L190","name":"Lean.LocalContext.getFVars","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getFVars","doc":"Return all of the free variables in the given context. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L183-L186","name":"Lean.LocalContext.getFVarIds","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getFVarIds","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L180-L181","name":"Lean.LocalContext.containsFVar","docLink":"./Lean/LocalContext.html#Lean.LocalContext.containsFVar","doc":"Returns true when the lctx contains the free variable `e`.\nPanics if `e` is not an fvar. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L175-L176","name":"Lean.LocalContext.contains","docLink":"./Lean/LocalContext.html#Lean.LocalContext.contains","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L172-L173","name":"Lean.LocalContext.getFVar!","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getFVar!","doc":"Gets the declaration for expression `e` in the local context.\nIf `e` is not a free variable or not present then panics. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L165-L168","name":"Lean.LocalContext.get!","docLink":"./Lean/LocalContext.html#Lean.LocalContext.get!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L162-L163","name":"Lean.LocalContext.findFVar?","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findFVar?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L159-L160","name":"Lean.LocalContext.find?","docLink":"./Lean/LocalContext.html#Lean.LocalContext.find?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L151-L156","name":"Lean.LocalContext.addDecl","docLink":"./Lean/LocalContext.html#Lean.LocalContext.addDecl","doc":"Low level API for adding a local declaration.\nDo not use directly. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L142-L147","name":"Lean.LocalContext.mkLetDecl","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkLetDecl","doc":"Low level API for let declarations. Do not use directly."},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L133-L138","name":"Lean.LocalContext.mkLocalDecl","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkLocalDecl","doc":"Low level API for creating local declarations.\nIt is used to implement actions in the monads `Elab` and `Tactic`.\nIt should not be used directly since the argument `(fvarId : FVarId)` is\nassumed to be unique. You can create a unique fvarId with `mkFreshFVarId`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L125-L126","name":"Lean.LocalContext.isEmpty","docLink":"./Lean/LocalContext.html#Lean.LocalContext.isEmpty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L122-L122","name":"Lean.LocalContext.empty","docLink":"./Lean/LocalContext.html#Lean.LocalContext.empty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L120-L120","name":"Lean.LocalContext.mkEmpty","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkEmpty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L115-L115","name":"Lean.instInhabitedLocalContext","docLink":"./Lean/LocalContext.html#Lean.instInhabitedLocalContext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L112-L115","name":"Lean.LocalContext","docLink":"./Lean/LocalContext.html#Lean.LocalContext","doc":"A LocalContext is an ordered set of local variable declarations.\nIt is used to store the free variables (also known as local constants) that\nare in scope.\n\nWhen inspecting a goal or expected type in the infoview, the local\ncontext is all of the variables above the `⊢` symbol.\n "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L99-L101","name":"Lean.LocalDecl.hasExprMVar","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.hasExprMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L96-L97","name":"Lean.LocalDecl.toExpr","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.toExpr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L92-L94","name":"Lean.LocalDecl.setBinderInfo","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setBinderInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L88-L90","name":"Lean.LocalDecl.setUserName","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setUserName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L84-L86","name":"Lean.LocalDecl.setValue","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L80-L82","name":"Lean.LocalDecl.hasValue","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.hasValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L76-L78","name":"Lean.LocalDecl.value","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.value","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L72-L74","name":"Lean.LocalDecl.value?","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.value?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L69-L70","name":"Lean.LocalDecl.isAuxDecl","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.isAuxDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L65-L67","name":"Lean.LocalDecl.binderInfo","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.binderInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L61-L63","name":"Lean.LocalDecl.setType","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L57-L59","name":"Lean.LocalDecl.type","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.type","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L53-L55","name":"Lean.LocalDecl.userName","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.userName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L49-L51","name":"Lean.LocalDecl.fvarId","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.fvarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L45-L47","name":"Lean.LocalDecl.setIndex","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setIndex","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L41-L43","name":"Lean.LocalDecl.index","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.index","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L37-L39","name":"Lean.LocalDecl.isLet","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.isLet","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L32-L34","name":"Lean.LocalDecl.binderInfoEx","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.binderInfoEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L29-L30","name":"Lean.mkLetDeclEx","docLink":"./Lean/LocalContext.html#Lean.mkLetDeclEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L26-L27","name":"Lean.mkLocalDeclEx","docLink":"./Lean/LocalContext.html#Lean.mkLocalDeclEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L23-L23","name":"Lean.instInhabitedLocalDecl","docLink":"./Lean/LocalContext.html#Lean.instInhabitedLocalDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/LocalContext.lean#L20-L23","name":"Lean.LocalDecl","docLink":"./Lean/LocalContext.html#Lean.LocalDecl","doc":"A declaration for a LocalContext. This is used to register which free variables are in scope.\nEach declaration comes with\n- `index` the position of the decl in the local context\n- `fvarId` the unique id of the free variables\n- `userName` the pretty-printable name of the variable\n- `type` the type.\nA `cdecl` is a local variable, a `ldecl` is a let-bound free variable with a `value : Expr`.\n"}]}