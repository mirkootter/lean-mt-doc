{"name":"Lean.Parser.Do","instances":[],"imports":["Init","Lean.Parser.Term"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L154-L154","name":"Lean.Parser.Term.termReturn","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.termReturn","doc":"`return` used outside of `do` blocks creates an implicit block around it and thus is equivalent to `pure e`, but helps with\navoiding parentheses.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L149-L149","name":"Lean.Parser.Term.termTry","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.termTry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L148-L148","name":"Lean.Parser.Term.termFor","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.termFor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L147-L147","name":"Lean.Parser.Term.termUnless","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.termUnless","doc":"`unless e do s` is a nicer way to write `if !e do s`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L143-L143","name":"Lean.Parser.Term.doElem.quot","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doElem.quot","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L141-L141","name":"Lean.Parser.Term.do","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.do","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L139-L139","name":"Lean.Parser.Term.doNested","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doNested","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L138-L138","name":"Lean.Parser.Term.doExpr","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doExpr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L124-L124","name":"Lean.Parser.Term.doAssert","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doAssert","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L123-L123","name":"Lean.Parser.Term.doDbgTrace","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doDbgTrace","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L122-L122","name":"Lean.Parser.Term.doReturn","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doReturn","doc":"`return e` inside of a `do` block makes the surrounding block evaluate to `pure e`, skipping any further statements.\nNote that uses of the `do` keyword in other syntax like in `for _ in _ do` do not constitute a surrounding block in this sense;\nin supported editors, the corresponding `do` keyword of the surrounding block is highlighted when hovering over `return`.\n\n`return` not followed by a term starting on the same line is equivalent to `return ()`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L114-L114","name":"Lean.Parser.Term.doContinue","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doContinue","doc":"`continue` skips to the next iteration of the surrounding `for` loop. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L112-L112","name":"Lean.Parser.Term.doBreak","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doBreak","doc":"`break` exits the surrounding `for` loop. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L109-L109","name":"Lean.Parser.Term.doTry","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doTry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L108-L108","name":"Lean.Parser.Term.doFinally","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doFinally","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L107-L107","name":"Lean.Parser.Term.doCatchMatch","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doCatchMatch","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L106-L106","name":"Lean.Parser.Term.doCatch","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doCatch","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L104-L104","name":"Lean.Parser.Term.doMatch","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doMatch","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L103-L103","name":"Lean.Parser.Term.doMatchAlts","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doMatchAlts","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L101-L101","name":"Lean.Parser.Term.doFor","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doFor","doc":"`for x in e do s`  iterates over `e` assuming `e`'s type has an instance of the `ForIn` typeclass.\n`break` and `continue` are supported inside `for` loops.\n`for x in e, x2 in e2, ... do s` iterates of the given collections in parallel, until at least one of them is exhausted.\nThe types of `e2` etc. must implement the `ToStream` typeclass.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L94-L94","name":"Lean.Parser.Term.doForDecl","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doForDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L93-L93","name":"Lean.Parser.Term.doUnless","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doUnless","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L89-L92","name":"Lean.Parser.Term.doIf","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doIf","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L88-L88","name":"Lean.Parser.Term.doIfCond","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doIfCond","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L87-L87","name":"Lean.Parser.Term.doIfProp","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doIfProp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L86-L86","name":"Lean.Parser.Term.doIfLet","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doIfLet","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L85-L85","name":"Lean.Parser.Term.doIfLetBind","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doIfLetBind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L84-L84","name":"Lean.Parser.Term.doIfLetPure","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doIfLetPure","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L82-L82","name":"Lean.Parser.Term.elseIf","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.elseIf","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L52-L52","name":"Lean.Parser.Term.doHave","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doHave","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L51-L51","name":"Lean.Parser.Term.doReassignArrow","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doReassignArrow","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L50-L50","name":"Lean.Parser.Term.doReassign","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doReassign","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L48-L48","name":"Lean.Parser.Term.letIdDeclNoBinders","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.letIdDeclNoBinders","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L44-L44","name":"Lean.Parser.Term.doLetArrow","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doLetArrow","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L43-L43","name":"Lean.Parser.Term.doPatDecl","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doPatDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L42-L42","name":"Lean.Parser.Term.doIdDecl","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doIdDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L41-L41","name":"Lean.Parser.Term.doLetRec","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doLetRec","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L39-L39","name":"Lean.Parser.Term.doLetElse","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doLetElse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L38-L38","name":"Lean.Parser.Term.doLet","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doLet","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L33-L36","name":"Lean.Parser.Term.notFollowedByRedefinedTermToken","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.notFollowedByRedefinedTermToken","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L25-L25","name":"Lean.Parser.Term.termBeforeDo","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.termBeforeDo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L24-L24","name":"Lean.Parser.Term.doSeq","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doSeq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L23-L23","name":"Lean.Parser.Term.doSeqBracketed","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doSeqBracketed","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L22-L22","name":"Lean.Parser.Term.doSeqIndent","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doSeqIndent","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L21-L21","name":"Lean.Parser.Term.doSeqItem","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.doSeqItem","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L19-L19","name":"Lean.Parser.Term.liftMethod","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.liftMethod","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L18-L18","name":"Lean.Parser.Term.leftArrow","docLink":"./Lean/Parser/Do.html#Lean.Parser.Term.leftArrow","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Parser/Do.lean#L14-L15","name":"Lean.Parser.doElemParser","docLink":"./Lean/Parser/Do.html#Lean.Parser.doElemParser","doc":""}]}