{"name":"Lean.Compiler.LCNF.JoinPoints","instances":[{"typeNames":["Lean.Compiler.LCNF.JoinPointFinder.CandidateInfo"],"name":"Lean.Compiler.LCNF.JoinPointFinder.instInhabitedCandidateInfo","className":"Inhabited"}],"imports":["Init","Lean.Compiler.LCNF.CompilerM","Lean.Compiler.LCNF.PassManager"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/JoinPoints.lean#L248-L249","name":"Lean.Compiler.LCNF.findJoinPoints","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.findJoinPoints","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/JoinPoints.lean#L243-L246","name":"Lean.Compiler.LCNF.Decl.findJoinPoints","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.Decl.findJoinPoints","doc":"Find all `fun` declarations in `decl` that qualify as join points then replace\ntheir definitions and call sites with `jp`/`jmp`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/JoinPoints.lean#L204-L235","name":"Lean.Compiler.LCNF.JoinPointFinder.replace.go","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.replace.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/JoinPoints.lean#L198-L235","name":"Lean.Compiler.LCNF.JoinPointFinder.replace","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.replace","doc":"Replace all join point candidate `fun` declarations with `jp` ones\nand all calls to them with `jmp`s.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/JoinPoints.lean#L159-L192","name":"Lean.Compiler.LCNF.JoinPointFinder.find.go","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.find.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/JoinPoints.lean#L155-L192","name":"Lean.Compiler.LCNF.JoinPointFinder.find","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.find","doc":"Find all `fun` declarations that qualify as a join point, that is:\n- are always fully applied\n- are always called in tail position\n\nWhere a `fun` `f` is in tail position iff it is called as follows:\n```\nlet res := f arg\nres\n```\nThe majority (if not all) tail calls will be brought into this form\nby the simplifier pass.\n\nFurthermore a `fun` disqualifies as a join point if turning it into a join\npoint would turn a call to it into an out of scope join point.\nThis can happen if we have something like:\n```\ndef test (b : Bool) (x y : Nat) : Nat :=\n  fun myjp x => Nat.add x (Nat.add x x)\n  fun f y =>\n    let x := Nat.add y y\n    myjp x\n  fun f y =>\n    let x := Nat.mul y y\n    myjp x\n  cases b (f x) (g y)\n```\n`f` and `g` can be detected as a join point right away, however\n`myjp` can only ever be detected as a join point after we have established\nthis. This is because otherwise the calls to `myjp` in `f` and `g` would\nproduce out of scope join point jumps.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/JoinPoints.lean#L45-L45","name":"Lean.Compiler.LCNF.JoinPointFinder.ReplaceM","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.ReplaceM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/JoinPoints.lean#L44-L44","name":"Lean.Compiler.LCNF.JoinPointFinder.FindM","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.FindM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/JoinPoints.lean#L42-L42","name":"Lean.Compiler.LCNF.JoinPointFinder.ReplaceCtx","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.ReplaceCtx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/JoinPoints.lean#L31-L40","name":"Lean.Compiler.LCNF.JoinPointFinder.FindState","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.FindState","doc":"The state for the join point candidate finder.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/JoinPoints.lean#L26-L26","name":"Lean.Compiler.LCNF.JoinPointFinder.instInhabitedCandidateInfo","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.instInhabitedCandidateInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/JoinPoints.lean#L16-L26","name":"Lean.Compiler.LCNF.JoinPointFinder.CandidateInfo","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.CandidateInfo","doc":"Info about a join point candidate (a `fun` declaration) during the find phase.\n"}]}