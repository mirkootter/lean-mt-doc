{"name":"Mt.Task.Basic","instances":[{"typeNames":["Mt.TaskM"],"name":"Mt.TaskM.instMonad","className":"Monad"},{"typeNames":["Mt.TaskM"],"name":"Mt.TaskM.instWf","className":"WellFoundedRelation"}],"imports":["Init","Mt.Reservation","Mt.Task.Impl"],"declarations":[{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L244-L247","name":"Mt.TaskM.instWf","docLink":"./Mt/Task/Basic.html#Mt.TaskM.instWf","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L227-L242","name":"Mt.TaskM.is_direct_cont_wf","docLink":"./Mt/Task/Basic.html#Mt.TaskM.is_direct_cont_wf","doc":"See `TaskM.is_direct_cont` "},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L218-L224","name":"Mt.TaskM.is_direct_cont","docLink":"./Mt/Task/Basic.html#Mt.TaskM.is_direct_cont","doc":"Well founded relation on `TaskM` fulfilled by continuations with their parents.\n\nIt can be used to perform well founded recursion `TaskM` without using the\nimplementation details of `TaskM`. Whenever `TaskM.iterate` returns a\ncontinuation, the continuation will be *smaller* according to this\nrelation.\n"},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L204-L209","name":"Mt.TaskM.iterate_blocking_rmr","docLink":"./Mt/Task/Basic.html#Mt.TaskM.iterate_blocking_rmr","doc":"Iteration of a `atomic_blocking_rmr` operation will always\nreturn a continuation.\n\nThe `IterationResult` contains the blocking predicate and\nthe desired read-modify-read operation. The caller should ensure\nthat the read-modify-operation is only iterated when the blocking\npredicate holds. "},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L186-L195","name":"Mt.TaskM.iterate_assert","docLink":"./Mt/Task/Basic.html#Mt.TaskM.iterate_assert","doc":"Iteration of an assertion will atomically check the condition\nand succeed or fail depending on the result. "},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L179-L182","name":"Mt.TaskM.iterate_panic","docLink":"./Mt/Task/Basic.html#Mt.TaskM.iterate_panic","doc":"Iteration of a panic will fail "},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L171-L176","name":"Mt.TaskM.iterate_read","docLink":"./Mt/Task/Basic.html#Mt.TaskM.iterate_read","doc":"Iteration of a read operation will compute a value based on the\ncurrent shared state and complete with the result "},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L162-L167","name":"Mt.TaskM.iterate_rm","docLink":"./Mt/Task/Basic.html#Mt.TaskM.iterate_rm","doc":"Iteration of a read-modify operation will perform the read modify\noperation and complete with `Unit.unit` "},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L154-L158","name":"Mt.TaskM.iterate_rmr","docLink":"./Mt/Task/Basic.html#Mt.TaskM.iterate_rmr","doc":"Iteration of a read-modify-read-operation will perform the read modify\nand complete with the computed result. "},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L139-L150","name":"Mt.TaskM.iterate_bind","docLink":"./Mt/Task/Basic.html#Mt.TaskM.iterate_bind","doc":"Iteration of `a >>= f` iterates `a` and returns a continuation.\n\n* If the `a` iteration has completed with result `t`, the next\n  iteration will start work on `f t`\n* If the `a` iteration has not completed yet, the next iteration\n  will continue.\n* If `a` has panicked, the exception is propagated.\n"},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L127-L129","name":"Mt.TaskM.iterate_pure","docLink":"./Mt/Task/Basic.html#Mt.TaskM.iterate_pure","doc":"Iteration of `pure t` always completes with result `t` "},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L118-L124","name":"Mt.TaskM.iterate","docLink":"./Mt/Task/Basic.html#Mt.TaskM.iterate","doc":"Iterate a given thread on a given state and provides an `IterationResult`.\n\nThe task may complete or panic. If it is does not, it is still running\nand a continuation will be provided in the result "},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L109-L112","name":"Mt.TaskM.atomic_blocking_rmr","docLink":"./Mt/Task/Basic.html#Mt.TaskM.atomic_blocking_rmr","doc":"`TaskM` primitive which blocks the current thread until a given\ncondition holds, and executes a read-modify-read operation afterwards.\n\nThere are neither spurious wakeups nor race conditions: The system will\nonly perform the read-modify-read operation if the provided condition\nholds. If it does not, the thread will block. "},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L99-L101","name":"Mt.TaskM.atomic_assert","docLink":"./Mt/Task/Basic.html#Mt.TaskM.atomic_assert","doc":"Atomic `TaskM` primitive to assert a given condition. The condition\nis checked atomically. If it returns `false`, the current thread panics. "},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L94-L95","name":"Mt.TaskM.panic","docLink":"./Mt/Task/Basic.html#Mt.TaskM.panic","doc":"Atomic `TaskM` primitive which throws an exception. The current thread\npanics and will be removed from the system "},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L86-L90","name":"Mt.TaskM.atomic_read","docLink":"./Mt/Task/Basic.html#Mt.TaskM.atomic_read","doc":"Atomic `TaskM` primitive to perform read the shared state. It\ndoes not change anything "},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L80-L82","name":"Mt.TaskM.atomic_read_modify","docLink":"./Mt/Task/Basic.html#Mt.TaskM.atomic_read_modify","doc":"Atomic `TaskM` primitive to perform read-modify operations on the\nshared state. It does not return anything. "},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L74-L76","name":"Mt.TaskM.atomic_read_modify_read","docLink":"./Mt/Task/Basic.html#Mt.TaskM.atomic_read_modify_read","doc":"Atomic `TaskM` primitive with read/write-access to the shared state.\n\nAdditional to performing a read-modify operation, it returns a value.\n\nExample: Compare Exchange (https://en.wikipedia.org/wiki/Compare-and-swap)\n"},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L60-L66","name":"Mt.TaskM.bind_assoc","docLink":"./Mt/Task/Basic.html#Mt.TaskM.bind_assoc","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L56-L58","name":"Mt.TaskM.instMonad","docLink":"./Mt/Task/Basic.html#Mt.TaskM.instMonad","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L51-L54","name":"Mt.TaskM.IterationResult.state","docLink":"./Mt/Task/Basic.html#Mt.TaskM.IterationResult.state","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L44-L47","name":"Mt.TaskM.IterationResult","docLink":"./Mt/Task/Basic.html#Mt.TaskM.IterationResult","doc":"The result of a single iteration of `TaskM`.\n\nIndependent of the result, the resulting shared state after\nthe iteration can be retrieved using `IterationResult.state`\n"},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Task/Basic.lean#L37-L37","name":"Mt.TaskM","docLink":"./Mt/Task/Basic.html#Mt.TaskM","doc":"Monad to describe single threaded algorithms. Tasks can be iterated\nstep by step until they finally complete or panic.\n\n`TaskM` is a monad, i.e. you can use the do-notation to write code:\n\n```\nimport Mt.Task.Basic\nopen Mt\n\nabbrev spec : Spec :={\n  State := Nat,\n  Reservation := UnitReservation,\n  validate :=λ _ _ => True\n}\n\ndef sample_task : TaskM spec Bool :=do\n  if (<- TaskM.atomic_read λ n => n) > 100 then\n    -- reset to 100\n    TaskM.atomic_read_modify λ _ => 100\n    return false\n  \n  TaskM.atomic_assert λ n => n < 500\n  \n  TaskM.atomic_read_modify λ n => n + 7\n  return true \n```\n\nNote: `TaskM` hat an associative bind operator, but it is not\na lawful monad: Binding two `pure` cannot be simplified into\na single pure, because it requires two iterations to complete.\n"}]}