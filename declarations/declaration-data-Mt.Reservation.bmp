{"name":"Mt.Reservation","instances":[{"typeNames":["Nat"],"name":"Mt.instIsReservationNat","className":"Mt.IsReservation"},{"typeNames":["Mt.LowerBound"],"name":"Mt.instAddLowerBound","className":"Add"},{"typeNames":["Mt.LowerBound"],"name":"Mt.LowerBound.instance","className":"Mt.IsReservation"},{"typeNames":["Mt.UnitReservation"],"name":"Mt.instIsReservationUnitReservation","className":"Mt.IsReservation"},{"typeNames":["Mt.Lock"],"name":"Mt.instAddLock","className":"Add"},{"typeNames":["Mt.Lock"],"name":"Mt.instIsReservationLock","className":"Mt.IsReservation"}],"imports":["Init","Mt.Utils.Nat"],"declarations":[{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L145-L149","name":"Mt.instIsReservationLock","docLink":"./Mt/Reservation.html#Mt.instIsReservationLock","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L140-L143","name":"Mt.Lock.add_assoc","docLink":"./Mt/Reservation.html#Mt.Lock.add_assoc","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L136-L138","name":"Mt.Lock.add_comm","docLink":"./Mt/Reservation.html#Mt.Lock.add_comm","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L133-L134","name":"Mt.Lock.invalid_add","docLink":"./Mt/Reservation.html#Mt.Lock.invalid_add","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L130-L131","name":"Mt.Lock.add_unlocked","docLink":"./Mt/Reservation.html#Mt.Lock.add_unlocked","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L127-L128","name":"Mt.Lock.unlocked_add","docLink":"./Mt/Reservation.html#Mt.Lock.unlocked_add","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L125-L125","name":"Mt.instAddLock","docLink":"./Mt/Reservation.html#Mt.instAddLock","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L118-L123","name":"Mt.Lock.eq_of_is_unlocked","docLink":"./Mt/Reservation.html#Mt.Lock.eq_of_is_unlocked","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L113-L116","name":"Mt.Lock.add","docLink":"./Mt/Reservation.html#Mt.Lock.add","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L109-L111","name":"Mt.Lock.is_unlocked","docLink":"./Mt/Reservation.html#Mt.Lock.is_unlocked","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L105-L107","name":"Mt.Lock.is_locked_and_valid","docLink":"./Mt/Reservation.html#Mt.Lock.is_locked_and_valid","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L101-L103","name":"Mt.Lock.is_locked","docLink":"./Mt/Reservation.html#Mt.Lock.is_locked","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L96-L99","name":"Mt.Lock","docLink":"./Mt/Reservation.html#Mt.Lock","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L89-L94","name":"Mt.instIsReservationUnitReservation","docLink":"./Mt/Reservation.html#Mt.instIsReservationUnitReservation","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L87-L87","name":"Mt.UnitReservation","docLink":"./Mt/Reservation.html#Mt.UnitReservation","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L81-L85","name":"Mt.LowerBound.instance","docLink":"./Mt/Reservation.html#Mt.LowerBound.instance","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L79-L79","name":"Mt.instAddLowerBound","docLink":"./Mt/Reservation.html#Mt.instAddLowerBound","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L77-L77","name":"Mt.LowerBound","docLink":"./Mt/Reservation.html#Mt.LowerBound","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L71-L75","name":"Mt.instIsReservationNat","docLink":"./Mt/Reservation.html#Mt.instIsReservationNat","doc":""},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L62-L66","name":"Mt.Spec","docLink":"./Mt/Reservation.html#Mt.Spec","doc":"Specification for a multithreading system\r\n\r\n  This specification specifies the context for threads but not the\r\n  threads itself. Threads encode a specification in their type. Only\r\n  threads with the same specification can be executed in parallel\r\n"},{"sourceLink":"https://github.com/mirkootter/lean-mt/blob/027a16555d487e46a0a00611b8039655378dfdd5/Mt/Reservation.lean#L47-L54","name":"Mt.IsReservation","docLink":"./Mt/Reservation.html#Mt.IsReservation","doc":"Class to represent 'reservations'\r\n\r\n  Reservations are the main method for reasoning about inter-thread behaviour.\r\n  \r\n  Basic idea: Only threads with a certain reservation are allowed to do certain\r\n  things. In many cases, some operation cannot be done atomically. Instead,\r\n  a thread needs to do several steps. Using reservations, the thread can keep\r\n  track about how many of those steps it has already accomplished. Other\r\n  threads have no way to manipulate each other's reservation, only their own.\r\n\r\n  For reasoning, the reservations of all threads have to be taken into account.\r\n  However, we want:\r\n  * The order of the other threads should not matter\r\n  * It should not matter if there are 10 other threads, or only one which\r\n    achieved those reservations\r\n  \r\n  As a consequence, we require an addition operator for reservations. Invariants\r\n  used for reasoning may use both the shared state and the sum of all\r\n  reservations, but not individual reservations. Each thread has to guarantee the\r\n  invariant, but it only knows about its own reservation, i.e. it has a lower\r\n  bound on the reservation, but nothing more. Therefore, it's actions are limited\r\n  by the reservation it has already achieved on its own.\r\n\r\n  ### Example:\r\n  * There is one shared `Nat` variable `x`\r\n  * Each thread performs the following three steps:\r\n    - generate a random variable `n : Nat`\r\n    - increase `x` by `n + 1` atomically\r\n    - decrease `x` by `n` atomically\r\n  * We want to reason that - in the end - `x` is never zero.\r\n\r\n    Solution: We introduce a `reservation : Nat` reservation which keeps track of how much\r\n    we have increased `x`. Therefore, the have the invariant ∑reservation = x.\r\n    Now, we can easily reason about the thread:\r\n  * Step 1: Generating the random number has no effect on the shared variable\r\n  * Step 2: We increase `x` by `n + 1` and assign `reservation :=n + 1`. Since the\r\n    reservations of the other threads have not changed, the invariant still holds\r\n  * Step 3: Since no other thread can affect our reservation, we still know that\r\n    `reservation = n + 1`. Because of our invariant, we also know\r\n    `x = ∑reservation ≥ reservation = n + 1`. Therefore, we can safely decrease both `x`\r\n    and `reservation` by `n` and we still have `x > 0`\r\n"}]}