{"name":"Lean.Compiler.LCNF.Types","instances":[],"imports":["Init","Lean.Meta.InferType"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L274-L277","name":"Lean.Compiler.LCNF.getArrowArity","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.LCNF.getArrowArity","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L269-L272","name":"Lean.Compiler.LCNF.isArrowClass?","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.LCNF.isArrowClass?","doc":"`isArrowClass? type` return `some ClsName` if the LCNF `type` is an instance of the class `ClsName`, or\nif it is arrow producing an instance of the class `ClsName`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L258-L263","name":"Lean.Compiler.LCNF.isClass?","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.LCNF.isClass?","doc":"`isClass? type` return `some ClsName` if the LCNF `type` is an instance of the class `ClsName`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L249-L253","name":"Lean.Compiler.LCNF.maybeTypeFormerType","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.LCNF.maybeTypeFormerType","doc":"Return `true` if `type` is a LCNF type former type or it is an \"any\" type.\nThis function is similar to `isTypeFormerType`, but more liberal.\nFor example, `isTypeFormerType` returns false for `lcAny` and `Nat → lcAny`, but\nthis function returns true.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L237-L241","name":"Lean.Compiler.LCNF.isPredicateType","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.LCNF.isPredicateType","doc":"Return `true` if `type` is a predicate.\nExamples: `Nat → Prop`, `Prop`, `Int → Bool → Prop`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L227-L231","name":"Lean.Compiler.LCNF.isTypeFormerType","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.LCNF.isTypeFormerType","doc":"Return `true` if `type` is a LCNF type former type.\n\nRemark: This is faster than `Lean.Meta.isTypeFormer`, as this\nassumes that the input `type` is an LCNF type.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L190-L217","name":"Lean.Compiler.LCNF.joinTypes?","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.LCNF.joinTypes?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L187-L188","name":"Lean.Compiler.LCNF.joinTypes","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.LCNF.joinTypes","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L166-L183","name":"Lean.Compiler.LCNF.toLCNFType.visitApp","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.LCNF.toLCNFType.visitApp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L155-L164","name":"Lean.Compiler.LCNF.toLCNFType.visitForall","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.LCNF.toLCNFType.visitForall","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L147-L153","name":"Lean.Compiler.LCNF.toLCNFType.whnfEta","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.LCNF.toLCNFType.whnfEta","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L127-L183","name":"Lean.Compiler.LCNF.toLCNFType","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.LCNF.toLCNFType","doc":"Convert a Lean type into a LCNF type used by the code generator.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L51-L52","name":"Lean.Compiler.LCNF.isPropFormer","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.LCNF.isPropFormer","doc":"Return true iff `e : Prop` or `e : As → Prop`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L37-L46","name":"Lean.Compiler.LCNF.isPropFormerType.go","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.LCNF.isPropFormerType.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L32-L46","name":"Lean.Compiler.LCNF.isPropFormerType","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.LCNF.isPropFormerType","doc":"Return true iff `type` is `Prop` or `As → Prop`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L24-L27","name":"Lean.Compiler.LCNF.isPropFormerTypeQuick","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.LCNF.isPropFormerTypeQuick","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L21-L22","name":"Lean.Expr.isErased","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Expr.isErased","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L18-L19","name":"Lean.Expr.isAnyType","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Expr.isAnyType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L16-L16","name":"Lean.Compiler.LCNF.anyTypeExpr","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.LCNF.anyTypeExpr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L15-L15","name":"Lean.Compiler.LCNF.erasedExpr","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.LCNF.erasedExpr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L11-L11","name":"Lean.Compiler.«term⊤»","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.«term⊤»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Types.lean#L10-L10","name":"Lean.Compiler.«term◾»","docLink":"./Lean/Compiler/LCNF/Types.html#Lean.Compiler.«term◾»","doc":""}]}