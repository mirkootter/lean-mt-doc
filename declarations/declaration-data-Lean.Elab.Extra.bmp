{"name":"Lean.Elab.Extra","instances":[],"imports":["Init","Lean.Elab.App","Lean.Elab.BuiltinNotation"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/Extra.lean#L453-L468","name":"Lean.Elab.Term.BinOp.elabDefaultOrNonempty","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.BinOp.elabDefaultOrNonempty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/Extra.lean#L450-L450","name":"Lean.Elab.Term.BinOp.elabBinRelNoProp","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.BinOp.elabBinRelNoProp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/Extra.lean#L448-L448","name":"Lean.Elab.Term.BinOp.elabBinRel","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.BinOp.elabBinRel","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/Extra.lean#L441-L446","name":"Lean.Elab.Term.BinOp.elabBinRelCore.toBoolIfNecessary","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.BinOp.elabBinRelCore.toBoolIfNecessary","doc":"If `noProp == true` and `e` has type `Prop`, then coerce it to `Bool`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/Extra.lean#L382-L446","name":"Lean.Elab.Term.BinOp.elabBinRelCore","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.BinOp.elabBinRelCore","doc":"Elaboration functionf for `binrel%` and `binrel_no_prop%` notations.\nWe use the infrastructure for `binop%` to make sure we propagate information between the left and right hand sides\nof a binary relation.\n\nRecall that the `binrel_no_prop%` notation is used for relations such as `==` which do not support `Prop`, but\nwe still want to be able to write `(5 > 2) == (2 > 1)`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/Extra.lean#L372-L372","name":"Lean.Elab.Term.BinOp.elabBinOpLazy","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.BinOp.elabBinOpLazy","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/Extra.lean#L368-L369","name":"Lean.Elab.Term.BinOp.elabBinOp","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.BinOp.elabBinOp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/Extra.lean#L51-L77","name":"Lean.Elab.Term.elabForIn'","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.elabForIn'","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Elab/Extra.lean#L25-L49","name":"Lean.Elab.Term.elabForIn","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.elabForIn","doc":""}]}