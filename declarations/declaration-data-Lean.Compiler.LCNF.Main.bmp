{"name":"Lean.Compiler.LCNF.Main","instances":[],"imports":["Init","Lean.Compiler.Options","Lean.Compiler.LCNF.PassManager","Lean.Compiler.LCNF.Passes","Lean.Compiler.LCNF.PrettyPrinter","Lean.Compiler.LCNF.ToDecl","Lean.Compiler.LCNF.Check","Lean.Compiler.LCNF.PullLetDecls","Lean.Compiler.LCNF.PhaseExt","Lean.Compiler.LCNF.CSE"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Main.lean#L94-L95","name":"Lean.Compiler.LCNF.main","docLink":"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.main","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Main.lean#L89-L91","name":"Lean.Compiler.LCNF.showDecl","docLink":"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.showDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Main.lean#L86-L87","name":"Lean.Compiler.LCNF.compile","docLink":"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.compile","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Main.lean#L61-L82","name":"Lean.Compiler.LCNF.PassManager.run","docLink":"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.PassManager.run","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Main.lean#L47-L57","name":"Lean.Compiler.LCNF.checkpoint","docLink":"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.checkpoint","doc":"A checkpoint in code generation to print all declarations in between\ncompiler passes in order to ease debugging.\nThe trace can be viewed with `set_option trace.Compiler.step true`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Main.lean#L38-L40","name":"Lean.Compiler.LCNF.shouldGenerateCode.isCompIrrelevant","docLink":"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.shouldGenerateCode.isCompIrrelevant","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Compiler/LCNF/Main.lean#L27-L40","name":"Lean.Compiler.LCNF.shouldGenerateCode","docLink":"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.shouldGenerateCode","doc":"We do not generate code for `declName` if\n- Its type is a proposition.\n- Its type is a type former.\n- It is tagged as `[macroInline]`.\n- It is a type class instance.\n\nRemark: we still generate code for declarations tagged as `[inline]`\nand `[specialize]` since they can be partially applied.\n"}]}